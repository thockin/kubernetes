//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by conversion-gen. DO NOT EDIT.

package v1alpha1

import (
	apimachinerypkgconversion "k8s.io/apimachinery/pkg/conversion"
	apimachinerypkgruntime "k8s.io/apimachinery/pkg/runtime"
	controllersserviceconfig "k8s.io/cloud-provider/controllers/service/config"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *apimachinerypkgruntime.Scheme) error {
	if err := s.AddConversionFunc((*controllersserviceconfig.ServiceControllerConfiguration)(nil), (*ServiceControllerConfiguration)(nil), func(a, b interface{}, scope apimachinerypkgconversion.Scope) error {
		return Convert_config_ServiceControllerConfiguration_To_v1alpha1_ServiceControllerConfiguration(a.(*controllersserviceconfig.ServiceControllerConfiguration), b.(*ServiceControllerConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*ServiceControllerConfiguration)(nil), (*controllersserviceconfig.ServiceControllerConfiguration)(nil), func(a, b interface{}, scope apimachinerypkgconversion.Scope) error {
		return Convert_v1alpha1_ServiceControllerConfiguration_To_config_ServiceControllerConfiguration(a.(*ServiceControllerConfiguration), b.(*controllersserviceconfig.ServiceControllerConfiguration), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha1_ServiceControllerConfiguration_To_config_ServiceControllerConfiguration(in *ServiceControllerConfiguration, out *controllersserviceconfig.ServiceControllerConfiguration, s apimachinerypkgconversion.Scope) error {
	out.ConcurrentServiceSyncs = in.ConcurrentServiceSyncs
	return nil
}

func autoConvert_config_ServiceControllerConfiguration_To_v1alpha1_ServiceControllerConfiguration(in *controllersserviceconfig.ServiceControllerConfiguration, out *ServiceControllerConfiguration, s apimachinerypkgconversion.Scope) error {
	out.ConcurrentServiceSyncs = in.ConcurrentServiceSyncs
	return nil
}
