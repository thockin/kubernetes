//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package minimum

import (
	fmt "fmt"

	operation "k8s.io/apimachinery/pkg/api/operation"
	safe "k8s.io/apimachinery/pkg/api/safe"
	validate "k8s.io/apimachinery/pkg/api/validate"
	field "k8s.io/apimachinery/pkg/util/validation/field"
	testscheme "k8s.io/code-generator/cmd/validation-gen/testscheme"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *testscheme.Scheme) error {
	scheme.AddValidationFunc((*T1)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_T1(opCtx, obj.(*T1), safe.Cast[*T1](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	return nil
}

func Validate_AI(opCtx operation.Context, obj, oldObj *AI, fldPath *field.Path) (errs field.ErrorList) {
	// type AI
	errs = append(errs, validate.Minimum(opCtx, fldPath, obj, oldObj, 1)...)

	return errs
}

func Validate_T1(opCtx operation.Context, obj, oldObj *T1, fldPath *field.Path) (errs field.ErrorList) {
	// field T1.TypeMeta has no validation

	// field T1.I
	errs = append(errs,
		func(obj, oldObj *int, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.Minimum(opCtx, fldPath, obj, oldObj, 1)...)
			return
		}(&obj.I, safe.Field(oldObj, func(oldObj *T1) *int { return &oldObj.I }), fldPath.Child("i"))...)

	// field T1.PI
	errs = append(errs,
		func(obj, oldObj *int, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.Minimum(opCtx, fldPath, obj, oldObj, 1)...)
			return
		}(obj.PI, safe.Field(oldObj, func(oldObj *T1) *int { return oldObj.PI }), fldPath.Child("pi"))...)

	// field T1.I16
	errs = append(errs,
		func(obj, oldObj *int16, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.Minimum(opCtx, fldPath, obj, oldObj, 1)...)
			return
		}(&obj.I16, safe.Field(oldObj, func(oldObj *T1) *int16 { return &oldObj.I16 }), fldPath.Child("i16"))...)

	// field T1.I32
	errs = append(errs,
		func(obj, oldObj *int32, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.Minimum(opCtx, fldPath, obj, oldObj, 1)...)
			return
		}(&obj.I32, safe.Field(oldObj, func(oldObj *T1) *int32 { return &oldObj.I32 }), fldPath.Child("i32"))...)

	// field T1.I64
	errs = append(errs,
		func(obj, oldObj *int64, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.Minimum(opCtx, fldPath, obj, oldObj, 1)...)
			return
		}(&obj.I64, safe.Field(oldObj, func(oldObj *T1) *int64 { return &oldObj.I64 }), fldPath.Child("i64"))...)

	// field T1.U
	errs = append(errs,
		func(obj, oldObj *uint, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.Minimum(opCtx, fldPath, obj, oldObj, 1)...)
			return
		}(&obj.U, safe.Field(oldObj, func(oldObj *T1) *uint { return &oldObj.U }), fldPath.Child("u"))...)

	// field T1.PU
	errs = append(errs,
		func(obj, oldObj *uint, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.Minimum(opCtx, fldPath, obj, oldObj, 1)...)
			return
		}(obj.PU, safe.Field(oldObj, func(oldObj *T1) *uint { return oldObj.PU }), fldPath.Child("pu"))...)

	// field T1.U16
	errs = append(errs,
		func(obj, oldObj *uint16, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.Minimum(opCtx, fldPath, obj, oldObj, 1)...)
			return
		}(&obj.U16, safe.Field(oldObj, func(oldObj *T1) *uint16 { return &oldObj.U16 }), fldPath.Child("u16"))...)

	// field T1.U32
	errs = append(errs,
		func(obj, oldObj *uint32, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.Minimum(opCtx, fldPath, obj, oldObj, 1)...)
			return
		}(&obj.U32, safe.Field(oldObj, func(oldObj *T1) *uint32 { return &oldObj.U32 }), fldPath.Child("u32"))...)

	// field T1.U64
	errs = append(errs,
		func(obj, oldObj *uint64, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.Minimum(opCtx, fldPath, obj, oldObj, 1)...)
			return
		}(&obj.U64, safe.Field(oldObj, func(oldObj *T1) *uint64 { return &oldObj.U64 }), fldPath.Child("u64"))...)

	// field T1.AI
	errs = append(errs,
		func(obj, oldObj *AI, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.Minimum(opCtx, fldPath, obj, oldObj, 1)...)
			errs = append(errs, Validate_AI(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.AI, safe.Field(oldObj, func(oldObj *T1) *AI { return &oldObj.AI }), fldPath.Child("ai"))...)

	// field T1.PAI
	errs = append(errs,
		func(obj, oldObj *AI, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.Minimum(opCtx, fldPath, obj, oldObj, 1)...)
			errs = append(errs, Validate_AI(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.PAI, safe.Field(oldObj, func(oldObj *T1) *AI { return oldObj.PAI }), fldPath.Child("pai"))...)

	return errs
}
