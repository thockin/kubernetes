Move FormatOnly to gengo
  - results in importing "self pkg" in each file
Move namer/import tweaks to prefactoring and see if dbsmith hates them
client-go and other codegens - use zz_generated.* names?


rebase frequently
  - update gengo
  - update kube-openapi
Don't put gengo2 and kube-openapi-hack in go.work
Step thru commits and run `go work sync`
  - maybe add that to the verify-go-workspace script?
Decide and document: how to install tools
Decide: vendor vs checked-in modcache vs nothing
find all GOPATH and gopath and _gopath
find all `go build` and `go install`
find all "vendor/..."
find all GO111MODULE
all test stuff
decide: go caches (GOCACHE and GOMODCACHE) in _output or no?
partial codegens should exit tools with failure
fix all gengo/v2 FIXMEs and minimize
Try to make all codegens work at each step?
Protobuf and others should be in update-codegen
find and remove all ./output and _gopath refs (weird old names?)
Do we commit go.work.sum?  How do I force it to generate?
  - Why is it different at the end of my stack - where did it change?
gengo/v2:
  - strategy:
    - convert all tools to v2
    - convert all to get rid of OutputBase
    - for each tool (ALL OF THEM)
      - make necessary v2 changes
    - delete the rest of gengo/v2
    - rename and move
  - universe holds funcs and packages?
  - findTypes puts .types[] on funcs
  - universe[pkg].SourcePath is not populated
  - setting package.Source is a hack - generators should not need to set it
    - we can look it up in universe (have to Load it first) but what if it
      doesn't exit?  Maybe we don't care, or just use outputBase
  - "genericArgs.Execute" -> "gengo.Execute"
  - packages.Load already finds types and funcs
  - don't set flags internally - use the scripts
  - rationalize what is a dir and what is a pkg
  - use types for pkg names vs local vs string
kill off find-binary shell function
remove defaulter --extra-peer-dirs flag
remove conversion --extra-dirs flag
hack/
    benchmark-go.sh
    boilerplate
    build-cross.sh
    build-go.sh
    cherry_pick_pull.sh
    conformance
    dev-build-and-push.sh
    dev-build-and-up.sh
    dev-push-conformance.sh
    e2e-internal
    e2e-node-test.sh
    generate-docs.sh
    gen-swagger-doc
    get-build.sh
    ginkgo-e2e.sh
    grab-profiles.sh
    install-etcd.sh
    jenkins
    lib
    lint-dependencies.sh
    list-feature-tests.sh
    local-up-cluster.sh
    logcheck.conf
    make-rules
    module-graph.sh
    OWNERS
    pin-dependency.sh
    print-workspace-status.sh
    README.md
    run-prometheus-on-etcd-scrapes.sh
    serve-prom-scrapes.sh
    testdata
    test-go.sh
    test-integration.sh
    tools
    unwanted-dependencies.json
    update-all.sh
    update-codegen.sh
    update-conformance-yaml.sh
    update-generated-api-compatibility-data.sh
    update-generated-device-plugin-dockerized.sh
    update-generated-device-plugin.sh
    update-generated-docs.sh
    update-generated-kms-dockerized.sh
    update-generated-kms.sh
    update-generated-kubelet-plugin-registration-dockerized.sh
    update-generated-kubelet-plugin-registration.sh
    update-generated-pod-resources-dockerized.sh
    update-generated-pod-resources.sh
    update-generated-protobuf-dockerized.sh
    update-generated-protobuf.sh
    update-generated-runtime-dockerized.sh
    update-generated-runtime.sh
    update-generated-stable-metrics.sh
    update-generated-swagger-docs.sh
    update-gofmt.sh
    update-import-aliases.sh
    update-internal-modules.sh
    update-kustomize.sh
    update-netparse-cve.sh
    update-openapi-spec.sh
    update-translations.sh
    update-vendor-licenses.sh
    update-vendor.sh
    verify-codegen.sh
    verify-conformance-requirements.sh
    verify-conformance-yaml.sh
    verify-description.sh
    verify-e2e-test-ownership.sh
    verify-external-dependencies-version.sh
    verify-flags
    verify-flags-underscore.py
    verify-generated-device-plugin.sh
    verify-generated-docs.sh
    verify-generated-kms.sh
    verify-generated-kubelet-plugin-registration.sh
    verify-generated-pod-resources.sh
    verify-generated-protobuf.sh
    verify-generated-runtime.sh
    verify-generated-stable-metrics.sh
    verify-generated-swagger-docs.sh
    verify-gofmt.sh
    verify-golangci-lint.sh
    verify-govet-levee.sh
    verify-govet.sh
    verify-import-aliases.sh
    verify-import-boss.sh
    verify-imports.sh
    verify-internal-modules.sh
    verify-licenses.sh
    verify-linkcheck.sh
    verify-netparse-cve.sh
    verify-non-mutating-validation.sh
    verify-openapi-spec.sh
    verify-pkg-names.sh
    verify-prerelease-lifecycle-tags.sh
    verify-prometheus-imports.sh
    verify-publishing-bot.py
    verify-readonly-packages.sh

    verify-vendor-licenses.sh
    verify-vendor.sh
    verify-no-vendor-cycles.sh

Why do we have staging/src/k8s.io/code-generator/hack/boilerplate.go.txt and
  hack/boilerplate/... and in staging/src/k8s.io/code-generator/hack and ...

Drop --logtostderr in makefile calls to generators - default?

All the scripts called by hack/update-codegen.sh are awful
  * Do they get all the flags right?

kill staging/src/k8s.io/code-generator/pkg/util
