//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by conversion-gen. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	apismetav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	apimachinerypkgconversion "k8s.io/apimachinery/pkg/conversion"
	apimachinerypkgruntime "k8s.io/apimachinery/pkg/runtime"
	kubeletconfigv1alpha1 "k8s.io/kubelet/config/v1alpha1"
	kubeletapisconfig "k8s.io/kubernetes/pkg/kubelet/apis/config"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *apimachinerypkgruntime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*kubeletconfigv1alpha1.CredentialProvider)(nil), (*kubeletapisconfig.CredentialProvider)(nil), func(a, b interface{}, scope apimachinerypkgconversion.Scope) error {
		return Convert_v1alpha1_CredentialProvider_To_config_CredentialProvider(a.(*kubeletconfigv1alpha1.CredentialProvider), b.(*kubeletapisconfig.CredentialProvider), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*kubeletapisconfig.CredentialProvider)(nil), (*kubeletconfigv1alpha1.CredentialProvider)(nil), func(a, b interface{}, scope apimachinerypkgconversion.Scope) error {
		return Convert_config_CredentialProvider_To_v1alpha1_CredentialProvider(a.(*kubeletapisconfig.CredentialProvider), b.(*kubeletconfigv1alpha1.CredentialProvider), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*kubeletconfigv1alpha1.CredentialProviderConfig)(nil), (*kubeletapisconfig.CredentialProviderConfig)(nil), func(a, b interface{}, scope apimachinerypkgconversion.Scope) error {
		return Convert_v1alpha1_CredentialProviderConfig_To_config_CredentialProviderConfig(a.(*kubeletconfigv1alpha1.CredentialProviderConfig), b.(*kubeletapisconfig.CredentialProviderConfig), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*kubeletapisconfig.CredentialProviderConfig)(nil), (*kubeletconfigv1alpha1.CredentialProviderConfig)(nil), func(a, b interface{}, scope apimachinerypkgconversion.Scope) error {
		return Convert_config_CredentialProviderConfig_To_v1alpha1_CredentialProviderConfig(a.(*kubeletapisconfig.CredentialProviderConfig), b.(*kubeletconfigv1alpha1.CredentialProviderConfig), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*kubeletconfigv1alpha1.ExecEnvVar)(nil), (*kubeletapisconfig.ExecEnvVar)(nil), func(a, b interface{}, scope apimachinerypkgconversion.Scope) error {
		return Convert_v1alpha1_ExecEnvVar_To_config_ExecEnvVar(a.(*kubeletconfigv1alpha1.ExecEnvVar), b.(*kubeletapisconfig.ExecEnvVar), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*kubeletapisconfig.ExecEnvVar)(nil), (*kubeletconfigv1alpha1.ExecEnvVar)(nil), func(a, b interface{}, scope apimachinerypkgconversion.Scope) error {
		return Convert_config_ExecEnvVar_To_v1alpha1_ExecEnvVar(a.(*kubeletapisconfig.ExecEnvVar), b.(*kubeletconfigv1alpha1.ExecEnvVar), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha1_CredentialProvider_To_config_CredentialProvider(in *kubeletconfigv1alpha1.CredentialProvider, out *kubeletapisconfig.CredentialProvider, s apimachinerypkgconversion.Scope) error {
	out.Name = in.Name
	out.MatchImages = *(*[]string)(unsafe.Pointer(&in.MatchImages))
	out.DefaultCacheDuration = (*apismetav1.Duration)(unsafe.Pointer(in.DefaultCacheDuration))
	out.APIVersion = in.APIVersion
	out.Args = *(*[]string)(unsafe.Pointer(&in.Args))
	out.Env = *(*[]kubeletapisconfig.ExecEnvVar)(unsafe.Pointer(&in.Env))
	return nil
}

// Convert_v1alpha1_CredentialProvider_To_config_CredentialProvider is an autogenerated conversion function.
func Convert_v1alpha1_CredentialProvider_To_config_CredentialProvider(in *kubeletconfigv1alpha1.CredentialProvider, out *kubeletapisconfig.CredentialProvider, s apimachinerypkgconversion.Scope) error {
	return autoConvert_v1alpha1_CredentialProvider_To_config_CredentialProvider(in, out, s)
}

func autoConvert_config_CredentialProvider_To_v1alpha1_CredentialProvider(in *kubeletapisconfig.CredentialProvider, out *kubeletconfigv1alpha1.CredentialProvider, s apimachinerypkgconversion.Scope) error {
	out.Name = in.Name
	out.MatchImages = *(*[]string)(unsafe.Pointer(&in.MatchImages))
	out.DefaultCacheDuration = (*apismetav1.Duration)(unsafe.Pointer(in.DefaultCacheDuration))
	out.APIVersion = in.APIVersion
	out.Args = *(*[]string)(unsafe.Pointer(&in.Args))
	out.Env = *(*[]kubeletconfigv1alpha1.ExecEnvVar)(unsafe.Pointer(&in.Env))
	return nil
}

// Convert_config_CredentialProvider_To_v1alpha1_CredentialProvider is an autogenerated conversion function.
func Convert_config_CredentialProvider_To_v1alpha1_CredentialProvider(in *kubeletapisconfig.CredentialProvider, out *kubeletconfigv1alpha1.CredentialProvider, s apimachinerypkgconversion.Scope) error {
	return autoConvert_config_CredentialProvider_To_v1alpha1_CredentialProvider(in, out, s)
}

func autoConvert_v1alpha1_CredentialProviderConfig_To_config_CredentialProviderConfig(in *kubeletconfigv1alpha1.CredentialProviderConfig, out *kubeletapisconfig.CredentialProviderConfig, s apimachinerypkgconversion.Scope) error {
	out.Providers = *(*[]kubeletapisconfig.CredentialProvider)(unsafe.Pointer(&in.Providers))
	return nil
}

// Convert_v1alpha1_CredentialProviderConfig_To_config_CredentialProviderConfig is an autogenerated conversion function.
func Convert_v1alpha1_CredentialProviderConfig_To_config_CredentialProviderConfig(in *kubeletconfigv1alpha1.CredentialProviderConfig, out *kubeletapisconfig.CredentialProviderConfig, s apimachinerypkgconversion.Scope) error {
	return autoConvert_v1alpha1_CredentialProviderConfig_To_config_CredentialProviderConfig(in, out, s)
}

func autoConvert_config_CredentialProviderConfig_To_v1alpha1_CredentialProviderConfig(in *kubeletapisconfig.CredentialProviderConfig, out *kubeletconfigv1alpha1.CredentialProviderConfig, s apimachinerypkgconversion.Scope) error {
	out.Providers = *(*[]kubeletconfigv1alpha1.CredentialProvider)(unsafe.Pointer(&in.Providers))
	return nil
}

// Convert_config_CredentialProviderConfig_To_v1alpha1_CredentialProviderConfig is an autogenerated conversion function.
func Convert_config_CredentialProviderConfig_To_v1alpha1_CredentialProviderConfig(in *kubeletapisconfig.CredentialProviderConfig, out *kubeletconfigv1alpha1.CredentialProviderConfig, s apimachinerypkgconversion.Scope) error {
	return autoConvert_config_CredentialProviderConfig_To_v1alpha1_CredentialProviderConfig(in, out, s)
}

func autoConvert_v1alpha1_ExecEnvVar_To_config_ExecEnvVar(in *kubeletconfigv1alpha1.ExecEnvVar, out *kubeletapisconfig.ExecEnvVar, s apimachinerypkgconversion.Scope) error {
	out.Name = in.Name
	out.Value = in.Value
	return nil
}

// Convert_v1alpha1_ExecEnvVar_To_config_ExecEnvVar is an autogenerated conversion function.
func Convert_v1alpha1_ExecEnvVar_To_config_ExecEnvVar(in *kubeletconfigv1alpha1.ExecEnvVar, out *kubeletapisconfig.ExecEnvVar, s apimachinerypkgconversion.Scope) error {
	return autoConvert_v1alpha1_ExecEnvVar_To_config_ExecEnvVar(in, out, s)
}

func autoConvert_config_ExecEnvVar_To_v1alpha1_ExecEnvVar(in *kubeletapisconfig.ExecEnvVar, out *kubeletconfigv1alpha1.ExecEnvVar, s apimachinerypkgconversion.Scope) error {
	out.Name = in.Name
	out.Value = in.Value
	return nil
}

// Convert_config_ExecEnvVar_To_v1alpha1_ExecEnvVar is an autogenerated conversion function.
func Convert_config_ExecEnvVar_To_v1alpha1_ExecEnvVar(in *kubeletapisconfig.ExecEnvVar, out *kubeletconfigv1alpha1.ExecEnvVar, s apimachinerypkgconversion.Scope) error {
	return autoConvert_config_ExecEnvVar_To_v1alpha1_ExecEnvVar(in, out, s)
}
