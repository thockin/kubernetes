//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by conversion-gen. DO NOT EDIT.

package v1

import (
	"unsafe"

	apicorev1 "k8s.io/api/core/v1"
	apinodev1 "k8s.io/api/node/v1"
	apimachinerypkgconversion "k8s.io/apimachinery/pkg/conversion"
	apimachinerypkgruntime "k8s.io/apimachinery/pkg/runtime"
	pkgapiscore "k8s.io/kubernetes/pkg/apis/core"
	pkgapisnode "k8s.io/kubernetes/pkg/apis/node"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *apimachinerypkgruntime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*apinodev1.Overhead)(nil), (*pkgapisnode.Overhead)(nil), func(a, b interface{}, scope apimachinerypkgconversion.Scope) error {
		return Convert_v1_Overhead_To_node_Overhead(a.(*apinodev1.Overhead), b.(*pkgapisnode.Overhead), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*pkgapisnode.Overhead)(nil), (*apinodev1.Overhead)(nil), func(a, b interface{}, scope apimachinerypkgconversion.Scope) error {
		return Convert_node_Overhead_To_v1_Overhead(a.(*pkgapisnode.Overhead), b.(*apinodev1.Overhead), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*apinodev1.RuntimeClass)(nil), (*pkgapisnode.RuntimeClass)(nil), func(a, b interface{}, scope apimachinerypkgconversion.Scope) error {
		return Convert_v1_RuntimeClass_To_node_RuntimeClass(a.(*apinodev1.RuntimeClass), b.(*pkgapisnode.RuntimeClass), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*pkgapisnode.RuntimeClass)(nil), (*apinodev1.RuntimeClass)(nil), func(a, b interface{}, scope apimachinerypkgconversion.Scope) error {
		return Convert_node_RuntimeClass_To_v1_RuntimeClass(a.(*pkgapisnode.RuntimeClass), b.(*apinodev1.RuntimeClass), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*apinodev1.RuntimeClassList)(nil), (*pkgapisnode.RuntimeClassList)(nil), func(a, b interface{}, scope apimachinerypkgconversion.Scope) error {
		return Convert_v1_RuntimeClassList_To_node_RuntimeClassList(a.(*apinodev1.RuntimeClassList), b.(*pkgapisnode.RuntimeClassList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*pkgapisnode.RuntimeClassList)(nil), (*apinodev1.RuntimeClassList)(nil), func(a, b interface{}, scope apimachinerypkgconversion.Scope) error {
		return Convert_node_RuntimeClassList_To_v1_RuntimeClassList(a.(*pkgapisnode.RuntimeClassList), b.(*apinodev1.RuntimeClassList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*apinodev1.Scheduling)(nil), (*pkgapisnode.Scheduling)(nil), func(a, b interface{}, scope apimachinerypkgconversion.Scope) error {
		return Convert_v1_Scheduling_To_node_Scheduling(a.(*apinodev1.Scheduling), b.(*pkgapisnode.Scheduling), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*pkgapisnode.Scheduling)(nil), (*apinodev1.Scheduling)(nil), func(a, b interface{}, scope apimachinerypkgconversion.Scope) error {
		return Convert_node_Scheduling_To_v1_Scheduling(a.(*pkgapisnode.Scheduling), b.(*apinodev1.Scheduling), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1_Overhead_To_node_Overhead(in *apinodev1.Overhead, out *pkgapisnode.Overhead, s apimachinerypkgconversion.Scope) error {
	out.PodFixed = *(*pkgapiscore.ResourceList)(unsafe.Pointer(&in.PodFixed))
	return nil
}

// Convert_v1_Overhead_To_node_Overhead is an autogenerated conversion function.
func Convert_v1_Overhead_To_node_Overhead(in *apinodev1.Overhead, out *pkgapisnode.Overhead, s apimachinerypkgconversion.Scope) error {
	return autoConvert_v1_Overhead_To_node_Overhead(in, out, s)
}

func autoConvert_node_Overhead_To_v1_Overhead(in *pkgapisnode.Overhead, out *apinodev1.Overhead, s apimachinerypkgconversion.Scope) error {
	out.PodFixed = *(*apicorev1.ResourceList)(unsafe.Pointer(&in.PodFixed))
	return nil
}

// Convert_node_Overhead_To_v1_Overhead is an autogenerated conversion function.
func Convert_node_Overhead_To_v1_Overhead(in *pkgapisnode.Overhead, out *apinodev1.Overhead, s apimachinerypkgconversion.Scope) error {
	return autoConvert_node_Overhead_To_v1_Overhead(in, out, s)
}

func autoConvert_v1_RuntimeClass_To_node_RuntimeClass(in *apinodev1.RuntimeClass, out *pkgapisnode.RuntimeClass, s apimachinerypkgconversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	out.Handler = in.Handler
	out.Overhead = (*pkgapisnode.Overhead)(unsafe.Pointer(in.Overhead))
	out.Scheduling = (*pkgapisnode.Scheduling)(unsafe.Pointer(in.Scheduling))
	return nil
}

// Convert_v1_RuntimeClass_To_node_RuntimeClass is an autogenerated conversion function.
func Convert_v1_RuntimeClass_To_node_RuntimeClass(in *apinodev1.RuntimeClass, out *pkgapisnode.RuntimeClass, s apimachinerypkgconversion.Scope) error {
	return autoConvert_v1_RuntimeClass_To_node_RuntimeClass(in, out, s)
}

func autoConvert_node_RuntimeClass_To_v1_RuntimeClass(in *pkgapisnode.RuntimeClass, out *apinodev1.RuntimeClass, s apimachinerypkgconversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	out.Handler = in.Handler
	out.Overhead = (*apinodev1.Overhead)(unsafe.Pointer(in.Overhead))
	out.Scheduling = (*apinodev1.Scheduling)(unsafe.Pointer(in.Scheduling))
	return nil
}

// Convert_node_RuntimeClass_To_v1_RuntimeClass is an autogenerated conversion function.
func Convert_node_RuntimeClass_To_v1_RuntimeClass(in *pkgapisnode.RuntimeClass, out *apinodev1.RuntimeClass, s apimachinerypkgconversion.Scope) error {
	return autoConvert_node_RuntimeClass_To_v1_RuntimeClass(in, out, s)
}

func autoConvert_v1_RuntimeClassList_To_node_RuntimeClassList(in *apinodev1.RuntimeClassList, out *pkgapisnode.RuntimeClassList, s apimachinerypkgconversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]pkgapisnode.RuntimeClass)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_v1_RuntimeClassList_To_node_RuntimeClassList is an autogenerated conversion function.
func Convert_v1_RuntimeClassList_To_node_RuntimeClassList(in *apinodev1.RuntimeClassList, out *pkgapisnode.RuntimeClassList, s apimachinerypkgconversion.Scope) error {
	return autoConvert_v1_RuntimeClassList_To_node_RuntimeClassList(in, out, s)
}

func autoConvert_node_RuntimeClassList_To_v1_RuntimeClassList(in *pkgapisnode.RuntimeClassList, out *apinodev1.RuntimeClassList, s apimachinerypkgconversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]apinodev1.RuntimeClass)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_node_RuntimeClassList_To_v1_RuntimeClassList is an autogenerated conversion function.
func Convert_node_RuntimeClassList_To_v1_RuntimeClassList(in *pkgapisnode.RuntimeClassList, out *apinodev1.RuntimeClassList, s apimachinerypkgconversion.Scope) error {
	return autoConvert_node_RuntimeClassList_To_v1_RuntimeClassList(in, out, s)
}

func autoConvert_v1_Scheduling_To_node_Scheduling(in *apinodev1.Scheduling, out *pkgapisnode.Scheduling, s apimachinerypkgconversion.Scope) error {
	out.NodeSelector = *(*map[string]string)(unsafe.Pointer(&in.NodeSelector))
	out.Tolerations = *(*[]pkgapiscore.Toleration)(unsafe.Pointer(&in.Tolerations))
	return nil
}

// Convert_v1_Scheduling_To_node_Scheduling is an autogenerated conversion function.
func Convert_v1_Scheduling_To_node_Scheduling(in *apinodev1.Scheduling, out *pkgapisnode.Scheduling, s apimachinerypkgconversion.Scope) error {
	return autoConvert_v1_Scheduling_To_node_Scheduling(in, out, s)
}

func autoConvert_node_Scheduling_To_v1_Scheduling(in *pkgapisnode.Scheduling, out *apinodev1.Scheduling, s apimachinerypkgconversion.Scope) error {
	out.NodeSelector = *(*map[string]string)(unsafe.Pointer(&in.NodeSelector))
	out.Tolerations = *(*[]apicorev1.Toleration)(unsafe.Pointer(&in.Tolerations))
	return nil
}

// Convert_node_Scheduling_To_v1_Scheduling is an autogenerated conversion function.
func Convert_node_Scheduling_To_v1_Scheduling(in *pkgapisnode.Scheduling, out *apinodev1.Scheduling, s apimachinerypkgconversion.Scope) error {
	return autoConvert_node_Scheduling_To_v1_Scheduling(in, out, s)
}
