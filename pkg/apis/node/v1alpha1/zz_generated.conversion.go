//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by conversion-gen. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	apicorev1 "k8s.io/api/core/v1"
	apinodev1alpha1 "k8s.io/api/node/v1alpha1"
	apimachinerypkgconversion "k8s.io/apimachinery/pkg/conversion"
	apimachinerypkgruntime "k8s.io/apimachinery/pkg/runtime"
	pkgapiscore "k8s.io/kubernetes/pkg/apis/core"
	pkgapisnode "k8s.io/kubernetes/pkg/apis/node"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *apimachinerypkgruntime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*apinodev1alpha1.Overhead)(nil), (*pkgapisnode.Overhead)(nil), func(a, b interface{}, scope apimachinerypkgconversion.Scope) error {
		return Convert_v1alpha1_Overhead_To_node_Overhead(a.(*apinodev1alpha1.Overhead), b.(*pkgapisnode.Overhead), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*pkgapisnode.Overhead)(nil), (*apinodev1alpha1.Overhead)(nil), func(a, b interface{}, scope apimachinerypkgconversion.Scope) error {
		return Convert_node_Overhead_To_v1alpha1_Overhead(a.(*pkgapisnode.Overhead), b.(*apinodev1alpha1.Overhead), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*apinodev1alpha1.RuntimeClassList)(nil), (*pkgapisnode.RuntimeClassList)(nil), func(a, b interface{}, scope apimachinerypkgconversion.Scope) error {
		return Convert_v1alpha1_RuntimeClassList_To_node_RuntimeClassList(a.(*apinodev1alpha1.RuntimeClassList), b.(*pkgapisnode.RuntimeClassList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*pkgapisnode.RuntimeClassList)(nil), (*apinodev1alpha1.RuntimeClassList)(nil), func(a, b interface{}, scope apimachinerypkgconversion.Scope) error {
		return Convert_node_RuntimeClassList_To_v1alpha1_RuntimeClassList(a.(*pkgapisnode.RuntimeClassList), b.(*apinodev1alpha1.RuntimeClassList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*apinodev1alpha1.Scheduling)(nil), (*pkgapisnode.Scheduling)(nil), func(a, b interface{}, scope apimachinerypkgconversion.Scope) error {
		return Convert_v1alpha1_Scheduling_To_node_Scheduling(a.(*apinodev1alpha1.Scheduling), b.(*pkgapisnode.Scheduling), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*pkgapisnode.Scheduling)(nil), (*apinodev1alpha1.Scheduling)(nil), func(a, b interface{}, scope apimachinerypkgconversion.Scope) error {
		return Convert_node_Scheduling_To_v1alpha1_Scheduling(a.(*pkgapisnode.Scheduling), b.(*apinodev1alpha1.Scheduling), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*pkgapisnode.RuntimeClass)(nil), (*apinodev1alpha1.RuntimeClass)(nil), func(a, b interface{}, scope apimachinerypkgconversion.Scope) error {
		return Convert_node_RuntimeClass_To_v1alpha1_RuntimeClass(a.(*pkgapisnode.RuntimeClass), b.(*apinodev1alpha1.RuntimeClass), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*apinodev1alpha1.RuntimeClass)(nil), (*pkgapisnode.RuntimeClass)(nil), func(a, b interface{}, scope apimachinerypkgconversion.Scope) error {
		return Convert_v1alpha1_RuntimeClass_To_node_RuntimeClass(a.(*apinodev1alpha1.RuntimeClass), b.(*pkgapisnode.RuntimeClass), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha1_Overhead_To_node_Overhead(in *apinodev1alpha1.Overhead, out *pkgapisnode.Overhead, s apimachinerypkgconversion.Scope) error {
	out.PodFixed = *(*pkgapiscore.ResourceList)(unsafe.Pointer(&in.PodFixed))
	return nil
}

// Convert_v1alpha1_Overhead_To_node_Overhead is an autogenerated conversion function.
func Convert_v1alpha1_Overhead_To_node_Overhead(in *apinodev1alpha1.Overhead, out *pkgapisnode.Overhead, s apimachinerypkgconversion.Scope) error {
	return autoConvert_v1alpha1_Overhead_To_node_Overhead(in, out, s)
}

func autoConvert_node_Overhead_To_v1alpha1_Overhead(in *pkgapisnode.Overhead, out *apinodev1alpha1.Overhead, s apimachinerypkgconversion.Scope) error {
	out.PodFixed = *(*apicorev1.ResourceList)(unsafe.Pointer(&in.PodFixed))
	return nil
}

// Convert_node_Overhead_To_v1alpha1_Overhead is an autogenerated conversion function.
func Convert_node_Overhead_To_v1alpha1_Overhead(in *pkgapisnode.Overhead, out *apinodev1alpha1.Overhead, s apimachinerypkgconversion.Scope) error {
	return autoConvert_node_Overhead_To_v1alpha1_Overhead(in, out, s)
}

func autoConvert_v1alpha1_RuntimeClass_To_node_RuntimeClass(in *apinodev1alpha1.RuntimeClass, out *pkgapisnode.RuntimeClass, s apimachinerypkgconversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	// WARNING: in.Spec requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_node_RuntimeClass_To_v1alpha1_RuntimeClass(in *pkgapisnode.RuntimeClass, out *apinodev1alpha1.RuntimeClass, s apimachinerypkgconversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	// WARNING: in.Handler requires manual conversion: does not exist in peer-type
	// WARNING: in.Overhead requires manual conversion: does not exist in peer-type
	// WARNING: in.Scheduling requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_v1alpha1_RuntimeClassList_To_node_RuntimeClassList(in *apinodev1alpha1.RuntimeClassList, out *pkgapisnode.RuntimeClassList, s apimachinerypkgconversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]pkgapisnode.RuntimeClass, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_RuntimeClass_To_node_RuntimeClass(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha1_RuntimeClassList_To_node_RuntimeClassList is an autogenerated conversion function.
func Convert_v1alpha1_RuntimeClassList_To_node_RuntimeClassList(in *apinodev1alpha1.RuntimeClassList, out *pkgapisnode.RuntimeClassList, s apimachinerypkgconversion.Scope) error {
	return autoConvert_v1alpha1_RuntimeClassList_To_node_RuntimeClassList(in, out, s)
}

func autoConvert_node_RuntimeClassList_To_v1alpha1_RuntimeClassList(in *pkgapisnode.RuntimeClassList, out *apinodev1alpha1.RuntimeClassList, s apimachinerypkgconversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]apinodev1alpha1.RuntimeClass, len(*in))
		for i := range *in {
			if err := Convert_node_RuntimeClass_To_v1alpha1_RuntimeClass(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_node_RuntimeClassList_To_v1alpha1_RuntimeClassList is an autogenerated conversion function.
func Convert_node_RuntimeClassList_To_v1alpha1_RuntimeClassList(in *pkgapisnode.RuntimeClassList, out *apinodev1alpha1.RuntimeClassList, s apimachinerypkgconversion.Scope) error {
	return autoConvert_node_RuntimeClassList_To_v1alpha1_RuntimeClassList(in, out, s)
}

func autoConvert_v1alpha1_Scheduling_To_node_Scheduling(in *apinodev1alpha1.Scheduling, out *pkgapisnode.Scheduling, s apimachinerypkgconversion.Scope) error {
	out.NodeSelector = *(*map[string]string)(unsafe.Pointer(&in.NodeSelector))
	out.Tolerations = *(*[]pkgapiscore.Toleration)(unsafe.Pointer(&in.Tolerations))
	return nil
}

// Convert_v1alpha1_Scheduling_To_node_Scheduling is an autogenerated conversion function.
func Convert_v1alpha1_Scheduling_To_node_Scheduling(in *apinodev1alpha1.Scheduling, out *pkgapisnode.Scheduling, s apimachinerypkgconversion.Scope) error {
	return autoConvert_v1alpha1_Scheduling_To_node_Scheduling(in, out, s)
}

func autoConvert_node_Scheduling_To_v1alpha1_Scheduling(in *pkgapisnode.Scheduling, out *apinodev1alpha1.Scheduling, s apimachinerypkgconversion.Scope) error {
	out.NodeSelector = *(*map[string]string)(unsafe.Pointer(&in.NodeSelector))
	out.Tolerations = *(*[]apicorev1.Toleration)(unsafe.Pointer(&in.Tolerations))
	return nil
}

// Convert_node_Scheduling_To_v1alpha1_Scheduling is an autogenerated conversion function.
func Convert_node_Scheduling_To_v1alpha1_Scheduling(in *pkgapisnode.Scheduling, out *apinodev1alpha1.Scheduling, s apimachinerypkgconversion.Scope) error {
	return autoConvert_node_Scheduling_To_v1alpha1_Scheduling(in, out, s)
}
